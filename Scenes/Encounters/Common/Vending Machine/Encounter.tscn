[gd_scene load_steps=19 format=2]

[ext_resource path="res://Prefabs/UI/TV.tscn" type="PackedScene" id=1]
[ext_resource path="res://Resources/Fonts/EncounterSmallText.tres" type="DynamicFont" id=2]
[ext_resource path="res://Resources/Fonts/EncounterTextMedium.tres" type="DynamicFont" id=3]
[ext_resource path="res://Scenes/Encounters/Common/Vending Machine/EncounterVendingMachine.gd" type="Script" id=4]
[ext_resource path="res://Scenes/Encounters/AfterEncounter.gd" type="Script" id=5]
[ext_resource path="res://Prefabs/UI/AfterFight/RoomChoosing.gd" type="Script" id=6]
[ext_resource path="res://Sprites/UI/Encounter/ScreenEncounterMini.png" type="Texture" id=7]
[ext_resource path="res://Sprites/UI/Battle UI/Icons/Stickers.png" type="Texture" id=8]
[ext_resource path="res://Sprites/Backround/First Floor/BackgroundFirstFloor.png" type="Texture" id=9]
[ext_resource path="res://Resources/Fonts/PixelText.tres" type="DynamicFont" id=10]
[ext_resource path="res://Sprites/UI/Buttons UI/button.png" type="Texture" id=11]
[ext_resource path="res://Resources/Fonts/EncounterText.tres" type="DynamicFont" id=12]

[sub_resource type="Animation" id=3]
resource_name = "ButtonsUp"
tracks/0/type = "value"
tracks/0/path = NodePath("ScrollContainer/VBoxContainer/PressButton:visible")
tracks/0/interp = 1
tracks/0/loop_wrap = true
tracks/0/imported = false
tracks/0/enabled = true
tracks/0/keys = {
"times": PoolRealArray( 0, 0.5 ),
"transitions": PoolRealArray( 1, 1 ),
"update": 1,
"values": [ false, true ]
}
tracks/1/type = "value"
tracks/1/path = NodePath("ScrollContainer/VBoxContainer/Leave:visible")
tracks/1/interp = 1
tracks/1/loop_wrap = true
tracks/1/imported = false
tracks/1/enabled = true
tracks/1/keys = {
"times": PoolRealArray( 0, 1 ),
"transitions": PoolRealArray( 1, 1 ),
"update": 1,
"values": [ false, true ]
}
tracks/2/type = "value"
tracks/2/path = NodePath("ScrollContainer/VBoxContainer/NinePatchRect6:visible")
tracks/2/interp = 1
tracks/2/loop_wrap = true
tracks/2/imported = false
tracks/2/enabled = true
tracks/2/keys = {
"times": PoolRealArray( 0 ),
"transitions": PoolRealArray( 1 ),
"update": 1,
"values": [ true ]
}
tracks/3/type = "value"
tracks/3/path = NodePath("ScrollContainer/VBoxContainer/NinePatchRect:visible")
tracks/3/interp = 1
tracks/3/loop_wrap = true
tracks/3/imported = false
tracks/3/enabled = true
tracks/3/keys = {
"times": PoolRealArray( 0 ),
"transitions": PoolRealArray( 1 ),
"update": 1,
"values": [ true ]
}
tracks/4/type = "value"
tracks/4/path = NodePath("ScrollContainer/VBoxContainer/NinePatchRect3:visible")
tracks/4/interp = 1
tracks/4/loop_wrap = true
tracks/4/imported = false
tracks/4/enabled = true
tracks/4/keys = {
"times": PoolRealArray( 0 ),
"transitions": PoolRealArray( 1 ),
"update": 1,
"values": [ true ]
}
tracks/5/type = "value"
tracks/5/path = NodePath("ScrollContainer/VBoxContainer/NinePatchRect4:visible")
tracks/5/interp = 1
tracks/5/loop_wrap = true
tracks/5/imported = false
tracks/5/enabled = true
tracks/5/keys = {
"times": PoolRealArray( 0 ),
"transitions": PoolRealArray( 1 ),
"update": 1,
"values": [ true ]
}

[sub_resource type="Animation" id=4]
resource_name = "End"
length = 5.0
tracks/0/type = "value"
tracks/0/path = NodePath("ScrollContainer/VBoxContainer/NinePatchRect2/Label:percent_visible")
tracks/0/interp = 1
tracks/0/loop_wrap = true
tracks/0/imported = false
tracks/0/enabled = false
tracks/0/keys = {
"times": PoolRealArray( 0, 5 ),
"transitions": PoolRealArray( 1, 1 ),
"update": 0,
"values": [ 0.0, 1.0 ]
}
tracks/1/type = "value"
tracks/1/path = NodePath("ScrollContainer:scroll_vertical")
tracks/1/interp = 1
tracks/1/loop_wrap = true
tracks/1/imported = false
tracks/1/enabled = true
tracks/1/keys = {
"times": PoolRealArray( 0, 0.5 ),
"transitions": PoolRealArray( 1, 1 ),
"update": 0,
"values": [ 0, 500 ]
}
tracks/2/type = "value"
tracks/2/path = NodePath("ScrollContainer/VBoxContainer/NinePatchRect2:visible")
tracks/2/interp = 1
tracks/2/loop_wrap = true
tracks/2/imported = false
tracks/2/enabled = true
tracks/2/keys = {
"times": PoolRealArray( 0 ),
"transitions": PoolRealArray( 1 ),
"update": 1,
"values": [ true ]
}
tracks/3/type = "value"
tracks/3/path = NodePath("ScrollContainer/VBoxContainer/PressButton:visible")
tracks/3/interp = 1
tracks/3/loop_wrap = true
tracks/3/imported = false
tracks/3/enabled = true
tracks/3/keys = {
"times": PoolRealArray( 0 ),
"transitions": PoolRealArray( 1 ),
"update": 1,
"values": [ false ]
}
tracks/4/type = "value"
tracks/4/path = NodePath("ScrollContainer/VBoxContainer/Leave:visible")
tracks/4/interp = 1
tracks/4/loop_wrap = true
tracks/4/imported = false
tracks/4/enabled = true
tracks/4/keys = {
"times": PoolRealArray( 0 ),
"transitions": PoolRealArray( 1 ),
"update": 1,
"values": [ false ]
}
tracks/5/type = "value"
tracks/5/path = NodePath("ScrollContainer/VBoxContainer/NinePatchRect5:visible")
tracks/5/interp = 1
tracks/5/loop_wrap = true
tracks/5/imported = false
tracks/5/enabled = true
tracks/5/keys = {
"times": PoolRealArray( 0, 1.5 ),
"transitions": PoolRealArray( 1, 1 ),
"update": 1,
"values": [ false, true ]
}
tracks/6/type = "value"
tracks/6/path = NodePath("ScrollContainer/VBoxContainer/NinePatchRect7:visible")
tracks/6/interp = 1
tracks/6/loop_wrap = true
tracks/6/imported = false
tracks/6/enabled = true
tracks/6/keys = {
"times": PoolRealArray( 0, 3 ),
"transitions": PoolRealArray( 1, 1 ),
"update": 1,
"values": [ false, true ]
}
tracks/7/type = "value"
tracks/7/path = NodePath("ScrollContainer/VBoxContainer/NinePatchRect6:visible")
tracks/7/interp = 1
tracks/7/loop_wrap = true
tracks/7/imported = false
tracks/7/enabled = true
tracks/7/keys = {
"times": PoolRealArray( 0 ),
"transitions": PoolRealArray( 1 ),
"update": 1,
"values": [ true ]
}

[sub_resource type="Animation" id=1]
length = 0.001
tracks/0/type = "value"
tracks/0/path = NodePath("ScrollContainer/VBoxContainer/NinePatchRect:visible")
tracks/0/interp = 1
tracks/0/loop_wrap = true
tracks/0/imported = false
tracks/0/enabled = true
tracks/0/keys = {
"times": PoolRealArray( 0 ),
"transitions": PoolRealArray( 1 ),
"update": 0,
"values": [ true ]
}
tracks/1/type = "value"
tracks/1/path = NodePath("ScrollContainer/VBoxContainer/NinePatchRect3:visible")
tracks/1/interp = 1
tracks/1/loop_wrap = true
tracks/1/imported = false
tracks/1/enabled = true
tracks/1/keys = {
"times": PoolRealArray( 0 ),
"transitions": PoolRealArray( 1 ),
"update": 0,
"values": [ true ]
}
tracks/2/type = "value"
tracks/2/path = NodePath("ScrollContainer/VBoxContainer/NinePatchRect4:visible")
tracks/2/interp = 1
tracks/2/loop_wrap = true
tracks/2/imported = false
tracks/2/enabled = true
tracks/2/keys = {
"times": PoolRealArray( 0 ),
"transitions": PoolRealArray( 1 ),
"update": 0,
"values": [ true ]
}

[sub_resource type="Animation" id=2]
resource_name = "Start"
length = 5.5
tracks/0/type = "value"
tracks/0/path = NodePath("ScrollContainer/VBoxContainer/NinePatchRect/Label:percent_visible")
tracks/0/interp = 1
tracks/0/loop_wrap = true
tracks/0/imported = false
tracks/0/enabled = false
tracks/0/keys = {
"times": PoolRealArray( 0, 5 ),
"transitions": PoolRealArray( 1, 1 ),
"update": 0,
"values": [ 0.0, 1.0 ]
}
tracks/1/type = "method"
tracks/1/path = NodePath(".")
tracks/1/interp = 1
tracks/1/loop_wrap = true
tracks/1/imported = false
tracks/1/enabled = true
tracks/1/keys = {
"times": PoolRealArray( 5.5 ),
"transitions": PoolRealArray( 1 ),
"values": [ {
"args": [  ],
"method": "ChangeStage"
} ]
}
tracks/2/type = "value"
tracks/2/path = NodePath("ScrollContainer/VBoxContainer/NinePatchRect3:visible")
tracks/2/interp = 1
tracks/2/loop_wrap = true
tracks/2/imported = false
tracks/2/enabled = true
tracks/2/keys = {
"times": PoolRealArray( 0, 2.5 ),
"transitions": PoolRealArray( 1, 1 ),
"update": 1,
"values": [ false, true ]
}
tracks/3/type = "value"
tracks/3/path = NodePath("ScrollContainer/VBoxContainer/NinePatchRect4:visible")
tracks/3/interp = 1
tracks/3/loop_wrap = true
tracks/3/imported = false
tracks/3/enabled = true
tracks/3/keys = {
"times": PoolRealArray( 0, 4 ),
"transitions": PoolRealArray( 1, 1 ),
"update": 1,
"values": [ false, true ]
}
tracks/4/type = "value"
tracks/4/path = NodePath("ScrollContainer/VBoxContainer/NinePatchRect:visible")
tracks/4/interp = 1
tracks/4/loop_wrap = true
tracks/4/imported = false
tracks/4/enabled = true
tracks/4/keys = {
"times": PoolRealArray( 1 ),
"transitions": PoolRealArray( 1 ),
"update": 1,
"values": [ true ]
}

[sub_resource type="Shader" id=19]
code = "/*
Shader from Godot Shaders - the free shader library.
godotshaders.com/shader/VHS-and-CRT-monitor-effect

This shader is under CC0 license. Feel free to use, improve and 
change this shader according to your needs and consider sharing 
the modified result to godotshaders.com.
*/

shader_type canvas_item;

//*** IMPORTANT! ***/ 
// - If you are using this shader to affect the node it is applied to set 'overlay' to false (unchecked in the instepctor).
// - If you are using this shader as an overlay, and want the shader to affect the nodes below in the Scene hierarchy,
//   set 'overlay' to true (checked in the inspector).
// On Mac there is potentially a bug causing this to not work properly. If that is the case and you want to use the shader as an overlay
// change all \"overlay ? SCREEN_TEXTURE : TEXTURE\" to only \"SCREEN_TEXTURE\" on lines 129-140, and \"vec2 uv = overlay ? warp(SCREEN_UV) : warp(UV);\"
// to \"vec2 uv = warp(SCREEN_UV);\" on line 98.
uniform bool overlay = false;

uniform float scanlines_opacity : hint_range(0.0, 1.0) = 0.4;
uniform float scanlines_width : hint_range(0.0, 0.5) = 0.25;
uniform float grille_opacity : hint_range(0.0, 1.0) = 0.3;
uniform vec2 resolution = vec2(640.0, 480.0); // Set the number of rows and columns the texture will be divided in. Scanlines and grille will make a square based on these values

uniform bool pixelate = true; // Fill each square (\"pixel\") with a sampled color, creating a pixel look and a more accurate representation of how a CRT monitor would work.

uniform bool roll = true;
uniform float roll_speed = 8.0; // Positive values are down, negative are up
uniform float roll_size : hint_range(0.0, 100.0) = 15.0;
uniform float roll_variation : hint_range(0.1, 5.0) = 1.8; // This valie is not an exact science. You have to play around with the value to find a look you like. How this works is explained in the code below.
uniform float distort_intensity : hint_range(0.0, 0.2) = 0.05; // The distortion created by the rolling effect.

uniform float noise_opacity : hint_range(0.0, 1.0) = 0.4;
uniform float noise_speed = 5.0; // There is a movement in the noise pattern that can be hard to see first. This sets the speed of that movement.

uniform float static_noise_intensity : hint_range(0.0, 1.0) = 0.06;

uniform float aberration : hint_range(-1.0, 1.0) = 0.03; // Chromatic aberration, a distortion on each color channel.
uniform float brightness = 1.4; // When adding scanline gaps and grille the image can get very dark. Brightness tries to compensate for that.
uniform bool discolor = true; // Add a discolor effect simulating a VHS

uniform float warp_amount :hint_range(0.0, 5.0) = 1.0; // Warp the texture edges simulating the curved glass of a CRT monitor or old TV.
uniform bool clip_warp = false;

uniform float vignette_intensity = 0.4; // Size of the vignette, how far towards the middle it should go.
uniform float vignette_opacity : hint_range(0.0, 1.0) = 0.5;

// Used by the noise functin to generate a pseudo random value between 0.0 and 1.0
vec2 random(vec2 uv){
    uv = vec2( dot(uv, vec2(127.1,311.7) ),
               dot(uv, vec2(269.5,183.3) ) );
    return -1.0 + 2.0 * fract(sin(uv) * 43758.5453123);
}

// Generate a Perlin noise used by the distortion effects
float noise(vec2 uv) {
    vec2 uv_index = floor(uv);
    vec2 uv_fract = fract(uv);

    vec2 blur = smoothstep(0.0, 1.0, uv_fract);

    return mix( mix( dot( random(uv_index + vec2(0.0,0.0) ), uv_fract - vec2(0.0,0.0) ),
                     dot( random(uv_index + vec2(1.0,0.0) ), uv_fract - vec2(1.0,0.0) ), blur.x),
                mix( dot( random(uv_index + vec2(0.0,1.0) ), uv_fract - vec2(0.0,1.0) ),
                     dot( random(uv_index + vec2(1.0,1.0) ), uv_fract - vec2(1.0,1.0) ), blur.x), blur.y) * 0.5 + 0.5;
}

// Takes in the UV and warps the edges, creating the spherized effect
vec2 warp(vec2 uv){
	vec2 delta = uv - 0.5;
	float delta2 = dot(delta.xy, delta.xy);
	float delta4 = delta2 * delta2;
	float delta_offset = delta4 * warp_amount;
	
	return uv + delta * delta_offset;
}

// Adds a black border to hide stretched pixel created by the warp effect
float border (vec2 uv){
	float radius = min(warp_amount, 0.08);
	radius = max(min(min(abs(radius * 2.0), abs(1.0)), abs(1.0)), 1e-5);
	vec2 abs_uv = abs(uv * 2.0 - 1.0) - vec2(1.0, 1.0) + radius;
	float dist = length(max(vec2(0.0), abs_uv)) / radius;
	float square = smoothstep(0.96, 1.0, dist);
	return clamp(1.0 - square, 0.0, 1.0);
}

// Adds a vignette shadow to the edges of the image
float vignette(vec2 uv){
	uv *= 1.0 - uv.xy;
	float vignette = uv.x * uv.y * 15.0;
	return pow(vignette, vignette_intensity * vignette_opacity);
}

void fragment()
{
	vec2 uv = overlay ? warp(SCREEN_UV) : warp(UV); // Warp the uv. uv will be used in most cases instead of UV to keep the warping
	vec2 text_uv = uv;
	vec2 roll_uv = vec2(0.0);
	float time = roll ? TIME : 0.0;
	

	// Pixelate the texture based on the given resolution.
	if (pixelate)
	{
		text_uv = ceil(uv * resolution) / resolution;
	}
	
	// Create the rolling effect. We need roll_line a bit later to make the noise effect.
	// That is why this runs if roll is true OR noise_opacity is over 0.
	float roll_line = 0.0;
	if (roll || noise_opacity > 0.0)
	{
		// Create the areas/lines where the texture will be distorted.
		roll_line = smoothstep(0.3, 0.9, sin(uv.y * roll_size - (time * roll_speed) ) );
		// Create more lines of a different size and apply to the first set of lines. This creates a bit of variation.
		roll_line *= roll_line * smoothstep(0.3, 0.9, sin(uv.y * roll_size * roll_variation - (time * roll_speed * roll_variation) ) );
		// Distort the UV where where the lines are
		roll_uv = vec2(( roll_line * distort_intensity * (1.-UV.x)), 0.0);
	}
	
	vec4 text;
	if (roll)
	{
		// If roll is true distort the texture with roll_uv. The texture is split up into RGB to 
		// make some chromatic aberration. We apply the aberration to the red and green channels accorging to the aberration parameter
		// and intensify it a bit in the roll distortion.
		text.r = texture(SCREEN_TEXTURE, text_uv + roll_uv * 0.8 + vec2(aberration, 0.0) * .1).r;
		text.g = texture(SCREEN_TEXTURE, text_uv + roll_uv * 1.2 - vec2(aberration, 0.0) * .1 ).g;
		text.b = texture(SCREEN_TEXTURE, text_uv + roll_uv).b;
		text.a = 1.0;
	}
	else
	{
		// If roll is false only apply the aberration without any distorion. The aberration values are very small so the .1 is only 
		// to make the slider in the Inspector less sensitive.
		text.r = texture(SCREEN_TEXTURE, text_uv + vec2(aberration, 0.0) * .1).r;
		text.g = texture(SCREEN_TEXTURE, text_uv - vec2(aberration, 0.0) * .1).g;
		text.b = texture(SCREEN_TEXTURE, text_uv).b;
		text.a = 1.0;
	}
	
	float r = text.r;
	float g = text.g;
	float b = text.b;
	
	uv = warp(UV);
	
	// CRT monitors don't have pixels but groups of red, green and blue dots or lines, called grille. We isolate the texture's color channels 
	// and divide it up in 3 offsetted lines to show the red, green and blue colors next to each other, with a small black gap between.
	if (grille_opacity > 0.0){
		
		float g_r = smoothstep(0.85, 0.95, abs(sin(uv.x * (resolution.x * 3.14159265))));
		r = mix(r, r * g_r, grille_opacity);
		
		float g_g = smoothstep(0.85, 0.95, abs(sin(1.05 + uv.x * (resolution.x * 3.14159265))));
		g = mix(g, g * g_g, grille_opacity);
		
		float b_b = smoothstep(0.85, 0.95, abs(sin(2.1 + uv.x * (resolution.x * 3.14159265))));
		b = mix(b, b * b_b, grille_opacity);
		
	}
	
	// Apply the grille to the texture's color channels and apply Brightness. Since the grille and the scanlines (below) make the image very dark you
	// can compensate by increasing the brightness.
	text.r = clamp(r * brightness, 0.0, 1.0);
	text.g = clamp(g * brightness, 0.0, 1.0);
	text.b = clamp(b * brightness, 0.0, 1.0);
	
	// Scanlines are the horizontal lines that make up the image on a CRT monitor. 
	// Here we are actual setting the black gap between each line, which I guess is not the right definition of the word, but you get the idea  
	float scanlines = 0.5;
	if (scanlines_opacity > 0.0)
	{
		// Same technique as above, create lines with sine and applying it to the texture. Smoothstep to allow setting the line size.
		scanlines = smoothstep(scanlines_width, scanlines_width + 0.5, abs(sin(uv.y * (resolution.y * 3.14159265))));
		text.rgb = mix(text.rgb, text.rgb * vec3(scanlines), scanlines_opacity);
	}
	
	// Apply the banded noise.
	if (noise_opacity > 0.0)
	{
		// Generate a noise pattern that is very stretched horizontally, and animate it with noise_speed
		float noise = smoothstep(0.4, 0.5, noise(uv * vec2(2.0, 200.0) + vec2(10.0, (TIME * (noise_speed))) ) );
		
		// We use roll_line (set above) to define how big the noise should be vertically (multiplying cuts off all black parts).
		// We also add in some basic noise with random() to break up the noise pattern above. The noise is sized according to 
		// the resolution value set in the inspector. If you don't like this look you can 
		// change \"ceil(uv * resolution) / resolution\" to only \"uv\" to make it less pixelated. Or multiply resolution with som value
		// greater than 1.0 to make them smaller.
		roll_line *= noise * scanlines * clamp(random((ceil(uv * resolution) / resolution) + vec2(TIME * 0.8, 0.0)).x + 0.8, 0.0, 1.0);
		// Add it to the texture based on noise_opacity
		text.rgb = clamp(mix(text.rgb, text.rgb + roll_line, noise_opacity), vec3(0.0), vec3(1.0));
	}
	
	// Apply static noise by generating it over the whole screen in the same way as above
	if (static_noise_intensity > 0.0)
	{
		text.rgb += clamp(random((ceil(uv * resolution) / resolution) + fract(TIME)).x, 0.0, 1.0) * static_noise_intensity;
	}
	
	// Apply a black border to hide imperfections caused by the warping.
	// Also apply the vignette
	text.rgb *= border(uv);
	text.rgb *= vignette(uv);
	// Hides the black border and make that area transparent. Good if you want to add the the texture on top an image of a TV or monitor.
	if (clip_warp)
	{
		text.a = border(uv);
	}
	
	// Apply discoloration to get a VHS look (lower saturation and higher contrast)
	// You can play with the values below or expose them in the Inspector.
	float saturation = 0.5;
	float contrast = 1.2;
	if (discolor)
	{
		// Saturation
		vec3 greyscale = vec3(text.r + text.g + text.b) / 3.;
		text.rgb = mix(text.rgb, greyscale, saturation);
		
		// Contrast
		float midpoint = pow(0.5, 2.2);
		text.rgb = (text.rgb - vec3(midpoint)) * contrast + midpoint;
	}
	
	COLOR = text;
}"

[sub_resource type="ShaderMaterial" id=20]
resource_local_to_scene = true
shader = SubResource( 19 )
shader_param/overlay = true
shader_param/scanlines_opacity = 0.089
shader_param/scanlines_width = 0.06
shader_param/grille_opacity = 0.079
shader_param/resolution = Vector2( 640, 480 )
shader_param/pixelate = false
shader_param/roll = true
shader_param/roll_speed = 2.0
shader_param/roll_size = 12.168
shader_param/roll_variation = 1.152
shader_param/distort_intensity = 0.007
shader_param/noise_opacity = 0.077
shader_param/noise_speed = 5.0
shader_param/static_noise_intensity = 0.1
shader_param/aberration = 0.0
shader_param/brightness = 1.4
shader_param/discolor = false
shader_param/warp_amount = 0.04
shader_param/clip_warp = false
shader_param/vignette_intensity = 0.222
shader_param/vignette_opacity = 0.075

[node name="Encounter - Vending Machine" type="Control"]
anchor_right = 1.0
anchor_bottom = 1.0
script = ExtResource( 4 )

[node name="Background" type="TextureRect" parent="."]
margin_left = -32.0
margin_top = -24.0
margin_right = 1984.0
margin_bottom = 1128.0
texture = ExtResource( 9 )
expand = true
stretch_mode = 5

[node name="TVScreen" type="TextureRect" parent="."]
margin_top = 80.0
margin_right = 1600.0
margin_bottom = 1080.0
texture = ExtResource( 7 )
expand = true

[node name="NinePatchRect" type="NinePatchRect" parent="."]
margin_left = 1248.0
margin_top = -16.0
margin_right = 1944.0
margin_bottom = 1088.0
rect_min_size = Vector2( 608, 565 )
texture = ExtResource( 11 )
patch_margin_left = 15
patch_margin_top = 15
patch_margin_right = 15
patch_margin_bottom = 15

[node name="NinePatchRect2" type="NinePatchRect" parent="."]
margin_left = -16.0
margin_right = 1952.0
margin_bottom = 88.0
texture = ExtResource( 11 )
patch_margin_left = 15
patch_margin_top = 15
patch_margin_right = 15
patch_margin_bottom = 15

[node name="Label" type="Label" parent="NinePatchRect2"]
margin_left = 48.0
margin_top = 8.0
margin_right = 328.0
margin_bottom = 72.0
text = "Vending Machine"

[node name="AnimationPlayer" type="AnimationPlayer" parent="."]
anims/ButtonsUp = SubResource( 3 )
anims/End = SubResource( 4 )
anims/RESET = SubResource( 1 )
anims/Start = SubResource( 2 )

[node name="ScrollContainer" type="ScrollContainer" parent="."]
margin_left = 1280.0
margin_top = 112.0
margin_right = 1904.0
margin_bottom = 1064.0
scroll_horizontal_enabled = false

[node name="VBoxContainer" type="VBoxContainer" parent="ScrollContainer"]
custom_constants/separation = 16

[node name="NinePatchRect" type="NinePatchRect" parent="ScrollContainer/VBoxContainer"]
margin_right = 608.0
margin_bottom = 225.0
rect_min_size = Vector2( 608, 225 )
texture = ExtResource( 11 )
patch_margin_left = 15
patch_margin_top = 15
patch_margin_right = 15
patch_margin_bottom = 15

[node name="Label" type="Label" parent="ScrollContainer/VBoxContainer/NinePatchRect"]
margin_left = 16.0
margin_top = 16.0
margin_right = 592.0
margin_bottom = 153.0
custom_fonts/font = ExtResource( 3 )
text = "Upon entering the room you see a broken vending machine, in the middle of nowhere. Inside it are various items that may well be suitable for your journey."
autowrap = true

[node name="NinePatchRect3" type="NinePatchRect" parent="ScrollContainer/VBoxContainer"]
margin_top = 241.0
margin_right = 608.0
margin_bottom = 368.0
rect_min_size = Vector2( 608, 127 )
texture = ExtResource( 11 )
patch_margin_left = 15
patch_margin_top = 15
patch_margin_right = 15
patch_margin_bottom = 15

[node name="Label" type="Label" parent="ScrollContainer/VBoxContainer/NinePatchRect3"]
margin_left = 16.0
margin_top = 16.0
margin_right = 592.0
margin_bottom = 111.0
custom_fonts/font = ExtResource( 3 )
text = "All that is required is to give the machine some color."
autowrap = true

[node name="NinePatchRect4" type="NinePatchRect" parent="ScrollContainer/VBoxContainer"]
margin_top = 384.0
margin_right = 608.0
margin_bottom = 464.0
rect_min_size = Vector2( 608, 80 )
texture = ExtResource( 11 )
patch_margin_left = 15
patch_margin_top = 15
patch_margin_right = 15
patch_margin_bottom = 15

[node name="Label" type="Label" parent="ScrollContainer/VBoxContainer/NinePatchRect4"]
margin_left = 16.0
margin_top = 16.0
margin_right = 592.0
margin_bottom = 64.0
custom_fonts/font = ExtResource( 3 )
text = "What will you do?"
autowrap = true

[node name="NinePatchRect6" type="NinePatchRect" parent="ScrollContainer/VBoxContainer"]
visible = false
margin_top = 480.0
margin_right = 608.0
margin_bottom = 510.0
rect_min_size = Vector2( 608, 16 )
texture = ExtResource( 11 )
patch_margin_left = 15
patch_margin_top = 15
patch_margin_right = 15
patch_margin_bottom = 15

[node name="PressButton" type="Button" parent="ScrollContainer/VBoxContainer"]
visible = false
margin_right = 608.0
margin_bottom = 128.0
rect_min_size = Vector2( 608, 128 )

[node name="Label" type="Label" parent="ScrollContainer/VBoxContainer/PressButton"]
margin_left = 16.0
margin_top = 14.0
margin_right = 56.0
margin_bottom = 78.0
mouse_filter = 1
text = "Press the Button"

[node name="Label2" type="Label" parent="ScrollContainer/VBoxContainer/PressButton"]
margin_left = 16.0
margin_top = 80.0
margin_right = 592.0
margin_bottom = 120.0
mouse_filter = 1
custom_fonts/font = ExtResource( 2 )
text = "You will lose one of your skills to get a random item."

[node name="Leave" type="Button" parent="ScrollContainer/VBoxContainer"]
visible = false
margin_top = 670.0
margin_right = 608.0
margin_bottom = 798.0
rect_min_size = Vector2( 608, 128 )

[node name="Label" type="Label" parent="ScrollContainer/VBoxContainer/Leave"]
margin_left = 16.0
margin_top = 14.0
margin_right = 56.0
margin_bottom = 78.0
mouse_filter = 1
text = "Leave"

[node name="Label2" type="Label" parent="ScrollContainer/VBoxContainer/Leave"]
margin_left = 16.0
margin_top = 80.0
margin_right = 592.0
margin_bottom = 120.0
mouse_filter = 1
custom_fonts/font = ExtResource( 2 )
text = "Do nothing, lose nothing, get nothing."

[node name="NinePatchRect2" type="NinePatchRect" parent="ScrollContainer/VBoxContainer"]
visible = false
margin_top = 814.0
margin_right = 608.0
margin_bottom = 942.0
rect_min_size = Vector2( 608, 128 )
texture = ExtResource( 11 )
patch_margin_left = 15
patch_margin_top = 15
patch_margin_right = 15
patch_margin_bottom = 15

[node name="Label" type="Label" parent="ScrollContainer/VBoxContainer/NinePatchRect2"]
margin_left = 16.0
margin_top = 16.0
margin_right = 592.0
margin_bottom = 112.0
custom_fonts/font = ExtResource( 3 )
text = "You decide to leave this place and go to the next room."
autowrap = true

[node name="NinePatchRect5" type="NinePatchRect" parent="ScrollContainer/VBoxContainer"]
visible = false
margin_top = 958.0
margin_right = 608.0
margin_bottom = 1088.0
rect_min_size = Vector2( 608, 130 )
texture = ExtResource( 11 )
patch_margin_left = 15
patch_margin_top = 15
patch_margin_right = 15
patch_margin_bottom = 15

[node name="Label" type="Label" parent="ScrollContainer/VBoxContainer/NinePatchRect5"]
margin_left = 16.0
margin_top = 16.0
margin_right = 592.0
margin_bottom = 114.0
custom_fonts/font = ExtResource( 3 )
text = " You can't rely on something like this to help you, or so you think."
autowrap = true

[node name="NinePatchRect7" type="NinePatchRect" parent="ScrollContainer/VBoxContainer"]
visible = false
margin_top = 1104.0
margin_right = 608.0
margin_bottom = 1234.0
rect_min_size = Vector2( 608, 130 )
texture = ExtResource( 11 )
patch_margin_left = 15
patch_margin_top = 15
patch_margin_right = 15
patch_margin_bottom = 15

[node name="Label" type="Label" parent="ScrollContainer/VBoxContainer/NinePatchRect7"]
margin_left = 16.0
margin_top = 16.0
margin_right = 592.0
margin_bottom = 114.0
custom_fonts/font = ExtResource( 3 )
text = "Although you had to supress the urge to try out this vending machine in hopes of getting lucky."
autowrap = true

[node name="AfterEncounter" type="Control" parent="."]
visible = false
margin_right = 40.0
margin_bottom = 40.0
script = ExtResource( 5 )

[node name="Background" type="TextureRect" parent="AfterEncounter"]
margin_left = -32.0
margin_top = -24.0
margin_right = 1984.0
margin_bottom = 1128.0
texture = ExtResource( 9 )
expand = true
stretch_mode = 5

[node name="ColorRect" type="ColorRect" parent="AfterEncounter"]
margin_right = 1920.0
margin_bottom = 1080.0
color = Color( 0.0196078, 0.160784, 0.266667, 0.592157 )

[node name="RoomChoosing" type="Control" parent="AfterEncounter"]
margin_right = 1920.0
margin_bottom = 1080.0

[node name="CenterContainer" type="CenterContainer" parent="AfterEncounter/RoomChoosing"]
margin_top = 440.0
margin_right = 1920.0
margin_bottom = 1080.0

[node name="HBoxContainer" type="HBoxContainer" parent="AfterEncounter/RoomChoosing/CenterContainer"]
margin_left = 142.0
margin_right = 1778.0
margin_bottom = 640.0
custom_constants/separation = 50

[node name="Room1" type="Button" parent="AfterEncounter/RoomChoosing/CenterContainer/HBoxContainer" groups=["Rooms"]]
margin_right = 512.0
margin_bottom = 640.0
rect_min_size = Vector2( 512, 640 )
script = ExtResource( 6 )

[node name="RoomIcon" type="TextureRect" parent="AfterEncounter/RoomChoosing/CenterContainer/HBoxContainer/Room1"]
margin_left = 158.0
margin_top = 21.0
margin_right = 342.0
margin_bottom = 205.0
mouse_filter = 2
texture = ExtResource( 8 )
expand = true

[node name="RoomName" type="Label" parent="AfterEncounter/RoomChoosing/CenterContainer/HBoxContainer/Room1"]
margin_left = 42.0
margin_top = 230.0
margin_right = 474.0
margin_bottom = 308.0
custom_colors/font_color = Color( 0.976471, 0.886275, 0.752941, 1 )
custom_fonts/font = ExtResource( 12 )
text = "Room Name"
align = 1
valign = 1
autowrap = true

[node name="RoomDescription" type="Label" parent="AfterEncounter/RoomChoosing/CenterContainer/HBoxContainer/Room1"]
margin_left = 37.0
margin_top = 359.0
margin_right = 473.0
margin_bottom = 602.0
custom_colors/font_color = Color( 0.976471, 0.886275, 0.752941, 1 )
custom_fonts/font = ExtResource( 3 )
text = "Room Description"
align = 1
autowrap = true
clip_text = true

[node name="Room2" type="Button" parent="AfterEncounter/RoomChoosing/CenterContainer/HBoxContainer" groups=["Rooms"]]
margin_left = 562.0
margin_right = 1074.0
margin_bottom = 640.0
rect_min_size = Vector2( 512, 640 )
script = ExtResource( 6 )
room_num = 2

[node name="RoomIcon" type="TextureRect" parent="AfterEncounter/RoomChoosing/CenterContainer/HBoxContainer/Room2"]
margin_left = 158.0
margin_top = 21.0
margin_right = 342.0
margin_bottom = 205.0
mouse_filter = 2
texture = ExtResource( 8 )
expand = true

[node name="RoomName" type="Label" parent="AfterEncounter/RoomChoosing/CenterContainer/HBoxContainer/Room2"]
margin_left = 42.0
margin_top = 230.0
margin_right = 474.0
margin_bottom = 308.0
custom_colors/font_color = Color( 0.976471, 0.886275, 0.752941, 1 )
custom_fonts/font = ExtResource( 12 )
text = "Room Name"
align = 1
valign = 1
autowrap = true

[node name="RoomDescription" type="Label" parent="AfterEncounter/RoomChoosing/CenterContainer/HBoxContainer/Room2"]
margin_left = 37.0
margin_top = 359.0
margin_right = 473.0
margin_bottom = 602.0
custom_colors/font_color = Color( 0.976471, 0.886275, 0.752941, 1 )
custom_fonts/font = ExtResource( 3 )
text = "Room Description"
align = 1
autowrap = true
clip_text = true

[node name="Room3" type="Button" parent="AfterEncounter/RoomChoosing/CenterContainer/HBoxContainer" groups=["Rooms"]]
margin_left = 1124.0
margin_right = 1636.0
margin_bottom = 640.0
rect_min_size = Vector2( 512, 640 )
script = ExtResource( 6 )
room_num = 3

[node name="RoomIcon" type="TextureRect" parent="AfterEncounter/RoomChoosing/CenterContainer/HBoxContainer/Room3"]
margin_left = 158.0
margin_top = 21.0
margin_right = 342.0
margin_bottom = 205.0
mouse_filter = 2
texture = ExtResource( 8 )
expand = true

[node name="RoomName" type="Label" parent="AfterEncounter/RoomChoosing/CenterContainer/HBoxContainer/Room3"]
margin_left = 42.0
margin_top = 230.0
margin_right = 474.0
margin_bottom = 308.0
custom_colors/font_color = Color( 0.976471, 0.886275, 0.752941, 1 )
custom_fonts/font = ExtResource( 12 )
text = "Room Name"
align = 1
valign = 1
autowrap = true

[node name="RoomDescription" type="Label" parent="AfterEncounter/RoomChoosing/CenterContainer/HBoxContainer/Room3"]
margin_left = 37.0
margin_top = 359.0
margin_right = 473.0
margin_bottom = 602.0
custom_colors/font_color = Color( 0.976471, 0.886275, 0.752941, 1 )
custom_fonts/font = ExtResource( 3 )
text = "Room Description"
align = 1
autowrap = true
clip_text = true

[node name="Label" type="Label" parent="AfterEncounter/RoomChoosing"]
margin_right = 1920.0
margin_bottom = 260.0
custom_fonts/font = ExtResource( 10 )
text = "Where To Head Next?"
align = 1
valign = 1

[node name="Reroll" type="Button" parent="AfterEncounter/RoomChoosing"]
margin_left = 832.0
margin_top = 320.0
margin_right = 1088.0
margin_bottom = 415.0
text = "Reroll x1"

[node name="TV" parent="AfterEncounter" instance=ExtResource( 1 )]
modulate = Color( 1, 1, 1, 0.490196 )
material = SubResource( 20 )
__meta__ = {
"_edit_lock_": true
}

[node name="GiveSkill" type="Control" parent="."]
margin_right = 40.0
margin_bottom = 40.0

[node name="ColorRect" type="ColorRect" parent="GiveSkill"]
margin_top = 88.0
margin_right = 1920.0
margin_bottom = 1080.0
color = Color( 0.133333, 0.12549, 0.203922, 0.494118 )

[node name="NinePatchRect" type="NinePatchRect" parent="GiveSkill"]
margin_left = 24.0
margin_top = 112.0
margin_right = 1896.0
margin_bottom = 1056.0
rect_min_size = Vector2( 608, 565 )
texture = ExtResource( 11 )
patch_margin_left = 15
patch_margin_top = 15
patch_margin_right = 15
patch_margin_bottom = 15

[node name="NinePatchRect2" type="NinePatchRect" parent="GiveSkill"]
margin_left = 24.0
margin_top = 112.0
margin_right = 1216.0
margin_bottom = 1056.0
rect_min_size = Vector2( 608, 565 )
texture = ExtResource( 11 )
patch_margin_left = 15
patch_margin_top = 15
patch_margin_right = 15
patch_margin_bottom = 15

[node name="Description" type="Control" parent="GiveSkill"]
margin_left = 1216.0
margin_top = 112.0
margin_right = 1896.0
margin_bottom = 1056.0

[node name="Name" type="Label" parent="GiveSkill/Description"]
margin_left = 16.0
margin_top = 24.0
margin_right = 56.0
margin_bottom = 88.0
custom_fonts/font = ExtResource( 12 )
text = "Skill Name"

[node name="ColorType" type="Label" parent="GiveSkill/Description"]
margin_left = 16.0
margin_top = 80.0
margin_right = 200.0
margin_bottom = 128.0
custom_colors/font_color = Color( 0.52549, 0.576471, 0.584314, 1 )
custom_fonts/font = ExtResource( 3 )
text = "Color: White 
Type: Active (1 action)"

[node name="ColorType2" type="Label" parent="GiveSkill/Description"]
margin_left = 336.0
margin_top = 80.0
margin_right = 520.0
margin_bottom = 175.0
custom_colors/font_color = Color( 0.52549, 0.576471, 0.584314, 1 )
custom_fonts/font = ExtResource( 3 )
text = "CD:
EN:"

[node name="Description" type="Label" parent="GiveSkill/Description"]
margin_left = 16.0
margin_top = 176.0
margin_right = 656.0
margin_bottom = 784.0
custom_fonts/font = ExtResource( 3 )
text = "Skill Description"

[node name="Sacrifice" type="Button" parent="GiveSkill/Description"]
margin_left = 32.0
margin_top = 824.0
margin_right = 648.0
margin_bottom = 919.0
text = "Sacrifice this Skill"

[node name="Timer" type="Timer" parent="."]
wait_time = 0.2
one_shot = true

[connection signal="pressed" from="ScrollContainer/VBoxContainer/PressButton" to="." method="_on_PressButton_pressed"]
[connection signal="pressed" from="ScrollContainer/VBoxContainer/Leave" to="." method="_on_Leave_pressed"]
[connection signal="pressed" from="AfterEncounter/RoomChoosing/CenterContainer/HBoxContainer/Room1" to="AfterEncounter/RoomChoosing/CenterContainer/HBoxContainer/Room1" method="_on_Room1_pressed"]
[connection signal="pressed" from="AfterEncounter/RoomChoosing/CenterContainer/HBoxContainer/Room2" to="AfterEncounter/RoomChoosing/CenterContainer/HBoxContainer/Room2" method="_on_Room1_pressed"]
[connection signal="pressed" from="AfterEncounter/RoomChoosing/CenterContainer/HBoxContainer/Room3" to="AfterEncounter/RoomChoosing/CenterContainer/HBoxContainer/Room3" method="_on_Room1_pressed"]
[connection signal="timeout" from="Timer" to="." method="_on_Timer_timeout"]
